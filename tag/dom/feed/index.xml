<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>dom &#8211; Oliver Caldwell&#039;s blog</title>
	<atom:link href="/tag/dom/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>On programming and text editing. Addicted to lisps.</description>
	<lastBuildDate>Wed, 18 Oct 2017 13:50:23 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>
	<item>
		<title>D3 within React the right way</title>
		<link>/2015/09/09/d3-within-react-the-right-way/</link>
		<comments>/2015/09/09/d3-within-react-the-right-way/#comments</comments>
		<pubDate>Wed, 09 Sep 2015 08:00:57 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[React]]></category>
		<category><![CDATA[d3]]></category>
		<category><![CDATA[dom]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[react]]></category>

		<guid isPermaLink="false">/?p=383</guid>
		<description><![CDATA[If you follow me on twitter (I’m @OliverCaldwell, if you don’t) you will have noticed that I’ve been tweeting about D3 and React a lot recently. More specifically, how to use both together in a pleasant yet efficient way. After a few weeks of thought and a couple of potential solutions actually being built and <a class="read-more" href="/2015/09/09/d3-within-react-the-right-way/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>If you follow me on twitter (I’m <a href="https://twitter.com/OliverCaldwell">@OliverCaldwell</a>, if you don’t) you will have noticed that I’ve been tweeting about <a href="http://d3js.org/">D3</a> and <a href="http://facebook.github.io/react/">React</a> a lot recently. More specifically, how to use both together in a pleasant yet efficient way. After a few weeks of thought and a couple of potential solutions actually being built and used, I settled on what I think is the ideal way to use DOM mutating JavaScript (like D3) from within React.</p>
<p>Many solutions involve stepping out of the React tree for that specific component, which <em>does</em> work, but leaves you with a little island of mutable DOM, festering away inside your tree. It just doesn’t feel quite right to me, my solution allows you to even use React developer tools with the SVG generated by D3.</p>
<p>TL;DR (although I’d quite like it if you read the rest!): Use <a href="https://github.com/Olical/react-faux-dom">react-faux-dom</a> to seamlessly blend D3 and other libraries into your React component tree.</p>
<h2>The problem</h2>
<p>D3 (<strong>d</strong>ata <strong>d</strong>riven <strong>d</strong>ocuments), as you probably know, is a JavaScript library that helps you build visualisations or anything else for that matter. It’s actually very general purpose since you can render SVG or regular DOM elements with it.</p>
<p>It works by mutating the DOM element provided to it, usually a root node you placed into your HTML. You call <code>.append('p')</code> and it inserts a <code>&lt;p&gt;&lt;/p&gt;</code> as a child of the root node you selected.</p>
<p>React on the other hand has you build your application through one big call stack to various render methods. You create a tree of objects that represents your application and its state then React works out what DOM elements it should mutate, add or remove on your behalf. This process is called <em><a href="https://facebook.github.io/react/docs/reconciliation.html">reconciliation</a></em>.</p>
<p>If you give an element React created to D3 and say “hey, D3, set the width to 100, thanks” it’ll happily oblige. Then React will notice and get pretty upset that you went behind its back and messed with its perfectly reconciled DOM. This isn’t great, as you can imagine.</p>
<p>So, the way we usually get around these problems is to tell React that from this component and below, it shouldn’t interfere, we will manage the DOM below this component manually. That’s where things like <a href="https://www.npmjs.com/package/react-d3-wrap">react-d3-wrap</a> come in, they define a component you can inherit from that pulls your code out of the React tree and lets D3 do its thing, React skips happily past this part of the DOM.</p>
<p>But what if we want to keep the React tree and use D3? What if we don’t want to have part of our DOM not managed by our benevolent DOM reconciling God?</p>
<h2>First (deprecated) attempt: d3-react</h2>
<p><a href="https://github.com/Olical/d3-react">d3-react</a> is essentially a plugin for D3 (injected into the D3 prototype) that gives you React methods within the D3 API. What this means is you need to use <code>.prop()</code> instead of <code>.attr()</code> and then you can call <code>.toReact()</code> when you’re done and return that result from your render function.</p>
<p>You create a DOM node and pass it to D3 on each render. It mutates this detached DOM and then gets converted to React elements when you’re done.</p>
<p>This has multiple problems, first and foremost: You can’t use the full D3 API or existing components! You have to use <code>.prop</code>, you can’t use <code>.classed</code> or <code>.style</code> for example. This is just unacceptable, any good solution needs to also work with existing components or with minimal tweaking, not a full rewrite.</p>
<p>The other problem (or one of them, anyway) is that you’re building and mutating a full real DOM tree on every render and then throwing it away. This is pretty inefficient, the DOM isn’t exactly light weight, that’s why we’re using React in the first place! (well, one of the reasons)</p>
<p>It works, you don’t need to opt out of the React render tree, but it’s not great. So what’s the next step after this?</p>
<h2>We make our own DOM</h2>
<p>Yeah. I thought it was a stupid idea when it first came to me, but the more I thought about it the more it made sense. A fake DOM that supported enough methods to work with D3, but no more. If it needs to work with more libraries in the future you just need to add the missing DOM methods, easy.</p>
<p>And so, <a href="https://github.com/Olical/react-faux-dom">react-faux-dom</a> was born. A fake DOM with enough methods to trick D3, including a selector engine and partial support for <code>addEventListener</code> etc. (<code>addEventListener</code> sets the appropriate <code>prop</code> value, so if you add two, it will overwrite the first, I may improve this later)</p>
<p>You can use the full D3 API (no special React methods), inspect it with React developer tools, have efficient D3 components without carefully placed <code>.enter()</code> / <code>.exit()</code> calls, use React animation techniques instead of D3s (good and bad, both approaches work well) as well as <em>render on the server side</em>. Yeah, buzzword time, this will allow you to have <strong>isomorphic charts</strong>.</p>
<blockquote><p>drops mic</p></blockquote>
<p>I copied <a href="http://bl.ocks.org/mbostock/3883245">one of mbostock’s charts</a> (the awesome creator of D3) and <a href="http://lab.oli.me.uk/d3-to-react-again/">rendered it through react-faux-dom</a> easily. Nothing needed to change, it just works. I’ve also converted a complex chart over to this at work from <code>react-d3-wrap</code>, it was pretty easy to do and now it’s far more efficient. That chart even has dynamic resizing and hover tooltip interaction!</p>
<p>A side effect of migrating that chart over was that I could make use of <code>this.setState({...})</code> to re-render my chart upon mouse interaction or window resize. It’s now much cleaner and easier to follow in my opinion.</p>
<p>The best thing I can compare this to is a lightweight and simple version of <a href="https://github.com/tmpvar/jsdom">jsdom</a> that targets React elements and only supports the minimum required DOM API to work with D3 (right now).</p>
<p><a href="https://github.com/QubitProducts/d3-react-sparkline">d3-react-sparkline</a> is a small React component I built at work (I work at <a href="http://www.qubit.com/">Qubit</a>, it’s awesome here) originally using my first approach but migrated to faux DOM. It serves as a good example, it should be familiar to React users and D3 users alike. All concepts remain the same, <code>react-faux-dom</code> is just the glue in the middle.</p>
<h2>Other implications</h2>
<p>Firstly, <strong>ISOMORPHIC CHARTS!</strong> A concept I find so awesome I thought it was worth mentioning again, in bold all caps. No more “we’re just fetching the data for this chart, brb”, send that rendered SVG straight down to the browser and then have React pick up where it left off on the server with the data as it changes over time. Amazing!</p>
<p>It’s not just charts though, I see a lot of function calls happening in amongst JSX to turn complex data into complex elements. Those elements don’t have to be bars in a chart, it could just be a <code>&lt;ul&gt;</code> with other nested <code>&lt;ul&gt;</code> tags inside. These function calls can be hard to follow when compared to D3’s declarative chaining syntax.</p>
<p>Why not use D3 as your JSX? D3 is an excellent (if not the best) tool for turning data into DOM.</p><pre class="crayon-plain-tag">function render() {
  var list = ReactFauxDOM.createElement('ul')

  d3.select(list)
    .selectAll('li')
    .data(this.props.data) // 1, 2, 3...
    .enter()
    .append('li')
    .text(function (d) {
      return d
    })

  return list.toReact()
}</pre><p>This results in a list containing each value passed through props, each with a unique key automatically assigned by index if you didn’t provide one. This automatic key assignment allows you to use existing D3 components without getting warnings from React, you can assign your own keys though if you feel it’ll optimise the reconciliation.</p>
<p>We’re taking the D3 data driven mindset, but running it within the stateless simple world of React seamlessly, no DOM required.</p>
<p>I’m using this in production right now, this is not just a little script knocked together in a day (although it was), it’s built to solve an existing problem in a nice way. Let me know if you find any any issues with it, raise a bug, even fix it if you can. It’s ready to use on real projects.</p>
<p>I hope many of you find this post and project useful, I’ve tried to explain “why” and not just “what” it is. Please feel free to give me your feedback, I’m very interested in hearing what others working on similar problems think about this.</p>
<p>Thanks for reading.</p>
]]></content:encoded>
			<wfw:commentRss>/2015/09/09/d3-within-react-the-right-way/feed/</wfw:commentRss>
		<slash:comments>37</slash:comments>
		</item>
	</channel>
</rss>
