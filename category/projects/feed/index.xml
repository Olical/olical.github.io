<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Projects &#8211; Oliver Caldwell&#039;s blog</title>
	<atom:link href="/category/projects/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>On programming and text editing. Addicted to lisps.</description>
	<lastBuildDate>Wed, 18 Oct 2017 13:50:23 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.8.2</generator>
	<item>
		<title>Working with multiple of lists in JavaScript</title>
		<link>/2016/02/09/working-with-multiple-of-lists-in-javascript/</link>
		<comments>/2016/02/09/working-with-multiple-of-lists-in-javascript/#comments</comments>
		<pubDate>Tue, 09 Feb 2016 23:05:44 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[Clojure]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Lisp]]></category>
		<category><![CDATA[Projects]]></category>
		<category><![CDATA[clojure]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[lisp]]></category>
		<category><![CDATA[lists]]></category>

		<guid isPermaLink="false">/?p=434</guid>
		<description><![CDATA[If you&#8217;ve ever had to iterate over multiple lists at the same time or map a filtered map of a map, you&#8217;ll understand that nesting all of those blocks and callbacks isn&#8217;t very easy to work with or understand. Luckily, there&#8217;s some cool techniques that make turning several arrays (or infinite sequences created by generators, <a class="read-more" href="/2016/02/09/working-with-multiple-of-lists-in-javascript/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>If you&#8217;ve ever had to iterate over multiple lists at the same time or map a filtered map of a map, you&#8217;ll understand that nesting all of those blocks and callbacks isn&#8217;t very easy to work with or understand.</p>
<p>Luckily, there&#8217;s some cool techniques that make turning several arrays (or infinite sequences created by generators, for example) into a single array with a concise and powerful syntax. I&#8217;m going to take this rather large list of <a href="https://gist.github.com/Olical/fa1c29fdfa42b52604f5">my public gists</a> and turn it into a list of all file names with the type set to &#8220;JavaScript&#8221;. I&#8217;m using lodash for convenience.</p><pre class="crayon-plain-tag">_.map(_.filter(_.flatMap(gists, (gist) =&gt; {
  return _.values(gist.files)
}), (file) =&gt; {
  return file.language === 'JavaScript'
}), (file) =&gt; {
  return file.filename
})</pre><p>Which yields the following array.</p><pre class="crayon-plain-tag">[ 'lazyArray.js',
  'thebutton.js',
  'formatNumberWithCommas.js',
  'x-example.js',
  'what-we-do.js',
  'compile.js',
  'compile.spec.js',
  'factory.js',
  'harvest.js',
  'main.js',
  'e.js',
  'example.js',
  'EventEmitter.js',
  'api.js',
  'example.js',
  'graphs.js',
  'colours.js' ]</pre><p>You could extract parts of this into named variables or move it into other functions, but my point being, something fairly simple requires a lot of juggling. If you want to add any more maps or filters in the middle you have to constantly move arguments around. It&#8217;s not easy to change and adapt.</p>
<p>We can however completely eliminate the need for this nesting by using something called list comprehension.</p>
<h2>List comprehension</h2>
<p>My favourite implementation of list comprehension can be found in my favourite language, <a href="https://clojuredocs.org/clojure.core/for">Clojure&#8217;s for</a>. You can also find them in many other languages such as Python and Scala, I&#8217;m just in love with <a href="https://xkcd.com/297/">all those parenthesis</a>.</p>
<p>JavaScript even <em>had</em> one planned for ES6 although it was pulled from the specification, I&#8217;m not sure why. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions">Firefox had something like the ES6 one</a> implemented for a while, but that was non-standard at the time. If it&#8217;s any consolation, I didn&#8217;t like the syntax anyway.</p>
<p>They allow you to produce a single list from one statement or call that accepts multiple lists alongside some parameters. You should, in theory, be able to reference between those lists and define intermediate values from those lists as they iterate through. You then have a function which is called with singular values from those lists, what it returns becomes your final list.</p>
<p>I&#8217;ve built one for JavaScript that is a port of the Clojure implementation, I&#8217;ve tried to keep it as close to the original as possible. Including code-as-data based API and laziness all the way down. You can use plain old arrays or infinite generators, it will accept <em>any</em> <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols">iterable</a>.</p>
<h2>Introducing <a href="https://github.com/Olical/forc">forc</a> <a style="display: inline-block;" href="https://badge.fury.io/js/forc"><img src="https://badge.fury.io/js/forc.svg" alt="npm version" height="18" /></a></h2>
<p>The name stems from &#8220;for comprehension&#8221; or maybe even &#8220;for Clojure&#8221;, but mainly because I obviously can&#8217;t use just &#8220;for&#8221; as a name. It allows you to do everything Clojure&#8217;s for does, but with JavaScript and any kind of iterable. It&#8217;s written with all sorts of ES6y things and I&#8217;d recommend using it with Babel, but it will work without them (I compile it at publish time). Pre-ES6 you won&#8217;t have any way to iterate the iterables it generates easily, so I wouldn&#8217;t recommend that.</p>
<p>Here&#8217;s an example of infinite sequences from the README.</p><pre class="crayon-plain-tag">// An infinite generator of all natural numbers
function * numbers () {
  let n = 0

  while (true) {
    yield n++
  }
}

forc([
  'n', numbers(),
  ':let', ['square', ({n}) =&gt; n * n],
  ':while', ({square}) =&gt; square &lt; 100
], ({square}) =&gt; square)

// Results in only those whos square is &lt; 100
// [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</pre><p>The API will look strange to anyone that hasn&#8217;t used the Clojure version, but it&#8217;s extremely powerful. The declarative array based approach allowed me to do some cool rebinding of values as I walk through the instructions. I&#8217;ve seen others do this with long chains of method calls or evals instead, both of which don&#8217;t come close to Clojure&#8217;s elegance, in my opinion. This library accidentally adds a little lisp to JavaScript, <a href="https://github.com/Olical/clojs">again</a>. I can&#8217;t help it.</p>
<p>Now let&#8217;s solve the initial problem with <a href="https://github.com/Olical/forc">forc</a>.</p><pre class="crayon-plain-tag">forc([
  'gist', gists,
  'file', ({gist}) =&gt; _.values(gist.files),
  ':when', ({file}) =&gt; file.language === 'JavaScript'
], ({file}) =&gt; file.filename)</pre><p>Pretty succinct, right? I mean, I think so. It&#8217;s a shame the &#8220;_.values&#8221; is required because &#8220;gist.files&#8221; is an object but that&#8217;s just the shape of the data. An object is not an iterable, maybe I could change the API in the future to automatically extract values from objects. This call produces a generator which contains the same contents as the initial call, you can expand it with &#8220;[&#8230;result]&#8221;.</p>
<p>The cool thing about it being a generator is that it only calculates the values you pull through, this allows you to use infinite iterators, for example. You can even use a generator created by &#8220;forc&#8221; as an argument for &#8220;forc&#8221;, it sill won&#8217;t execute a thing until you pull the values through by resolving the iterator.</p>
<p>Feel free to check out the README and tests to get a better idea of the capabilities. The Clojure documentation is also pretty good since I&#8217;ve copied the API.</p>
<p>I hope you find this useful!</p>
]]></content:encoded>
			<wfw:commentRss>/2016/02/09/working-with-multiple-of-lists-in-javascript/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>Lazy arrays in JavaScript</title>
		<link>/2015/05/31/lazy-arrays-in-javascript/</link>
		<comments>/2015/05/31/lazy-arrays-in-javascript/#comments</comments>
		<pubDate>Sun, 31 May 2015 11:28:23 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Projects]]></category>
		<category><![CDATA[arrays]]></category>
		<category><![CDATA[clojure]]></category>
		<category><![CDATA[lazy]]></category>
		<category><![CDATA[lisp]]></category>
		<category><![CDATA[seq]]></category>

		<guid isPermaLink="false">/?p=343</guid>
		<description><![CDATA[So I built a thing called lazy-array. It came off the back of a tiny gist and grew into something quite powerful (if I do say so myself). This project allows you to define lazy arrays in JavaScript, surprisingly enough, but what are they? Lazy arrays A lazy array is a sort of collection that <a class="read-more" href="/2015/05/31/lazy-arrays-in-javascript/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>So I built a thing called <a href="https://github.com/Wolfy87/lazy-array">lazy-array</a>. It came off the back of <a href="https://gist.github.com/Wolfy87/75b435fce2091f79155e">a tiny gist</a> and grew into something quite powerful (if I do say so myself). This project allows you to define lazy arrays in JavaScript, surprisingly enough, but what are they?</p>
<h3>Lazy arrays</h3>
<p>A lazy array is a sort of collection that doesn&#8217;t actually do or contain anything until it&#8217;s absolutely necessary. So a lazy <a href="http://clojure.org/sequences">sequence</a> in Clojure will do as little as possible until required. I&#8217;ve actually modelled my implementation on that of <a href="http://theatticlight.net/posts/Lazy-Sequences-in-Clojure/">Clojure&#8217;s lazy sequences</a>.</p>
<p>This allows you to represent things that don&#8217;t exist yet or are infinite, such as the entire Fibonacci sequence. That&#8217;s a powerful concept that I want to explore a little within the JavaScript UI space.</p>
<h3>This implementation</h3>
<p>My implementation actually works fine with vanilla arrays as well as the lazy variety, so my library ends up being a set of array manipulation functions (like map and filter) that evaluate at the last possible moment and can consume infinite lazy arrays of all positive integers, for example.</p>
<p>A map or filter over a value would not yield another value, they produce another lazy array and don&#8217;t actually execute anything at the time. They only resolve when you force them to using the <em>all</em> function or you request a specific item from the array (like the first or 10th). The results of a lazy array instance are also cached and used the next time it&#8217;s requested, just like Clojure, so that&#8217;s worth bearing in mind. I haven&#8217;t seen it cause issues, but it should in theory make repeated calls to things very fast.</p>
<blockquote class="twitter-tweet" lang="en">
<p dir="ltr" lang="en"><a href="https://twitter.com/OliverCaldwell">@OliverCaldwell</a> <a href="https://twitter.com/closuresaddict">@closuresaddict</a> I think you now which route I favour. Once you&#8217;ve amassed enough lipstick, it&#8217;s time to get rid of the pig.</p>
<p>— MacroServices (@krisajenkins) <a href="https://twitter.com/krisajenkins/status/602045724164038657">May 23, 2015</a></p></blockquote>
<p><script src="//platform.twitter.com/widgets.js" async="" charset="utf-8"></script></p>
<p>Well said, <a href="https://twitter.com/krisajenkins">Kris</a>. This is more lipstick. I hope it&#8217;s good lipstick.</p>
<h3>Fibonacci: The classic</h3>
<p>Every time someone discusses laziness they create an example using the Fibonacci sequence, this is no exception. I&#8217;m going to port this little Clojure implementation from <a href="http://en.wikibooks.org/wiki/Clojure_Programming/Examples/Lazy_Fibonacci">a wiki</a> to lazy-array.</p><pre class="crayon-plain-tag">(defn fib [a b] (lazy-seq (cons a (fib b (+ a b)))))


(take 5 (fib 1 1))

;; Results in: (1 1 2 3 5)</pre><p>The Clojure implementation is very elegant, fitting for such a lovely language. When a lazy sequence is printed to the command line in Clojure it is automatically resolved, so they didn&#8217;t have to use <em>doall</em>, in the following JavaScript example I will use my equivalent to Clojure&#8217;s <em>doall</em>, <em>all</em>, just to illustrate how it would actually be expanded.</p><pre class="crayon-plain-tag">'use strict';

var assert = require('assert');
var larr = require('..');

/**
 * Creates a lazy array that generates the Fibonacci sequence. Requires you to
 * pass in the initial numbers, probably 1 and 1.
 *
 * @param {Number} a
 * @param {Number} b
 * @return {LazyArray}
 */
function fib(a, b) {
    return larr.create(function () {
        return larr.cons(a, fib(b, a + b));
    });
}

describe('fib', function () {
    var f;

    beforeEach(function () {
        f = fib(1, 1);
    });

    it('should provide the 50th number in the sequence', function () {
        // Actually at index 49 since nth is zero indexed.
        var fib50 = 12586269025;
        assert.strictEqual(larr.nth(f, 49), fib50);
    });

    it('should provide the 10th to the 20th', function () {
        // Actually drop 9 and take 11 to get this result.
        var fib10to20 = [
            55,
            89,
            144,
            233,
            377,
            610,
            987,
            1597,
            2584,
            4181,
            6765
        ];

        var actual = larr.all(larr.take(11, larr.drop(9, f)));
        assert.deepEqual(actual, fib10to20);
    });
});</pre><p>So that&#8217;s an actual test that I&#8217;ve just added to the project which showcases a lot of the functionality. The most interesting thing is the simplicity of the <em>fib</em> function which creates the lazy array. You may say &#8220;well a recursive solution would also be that succinct&#8221; <strong>but</strong>, a recursive solution would eventually blow up since JavaScript does not have <a href="http://en.wikipedia.org/wiki/Tail_call">tail call optimisation</a> (<a href="http://www.reddit.com/r/javascript/comments/162tth/javascript_es6_has_tail_call_optimization/">yet</a>). Thanks to a single tiny while loop inside one of my functions, lazy arrays can just keep going. So at the very least lazy-array allows you to do sort of tail call optimised recursion in JavaScript.</p>
<h3>Applications within the UI</h3>
<p>I don&#8217;t know about you, but I don&#8217;t get to write numerical sequences for a living (boo). We JavaScript frontend wranglers deal with events, networking and state all day long, so building this had me wondering if I could apply laziness to the UI domain. The more I thought about this concept and talked with colleagues about it I realised that I&#8217;m essentially heading towards <a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">functional reactive programming</a>, with <a href="https://baconjs.github.io/">bacon.js</a> as a JavaScript example.</p>
<p>I think it&#8217;s cool that I&#8217;m heading towards this same realm of reactivity pretty much by accident, it&#8217;s the natural progression once you&#8217;ve got the core functions down I feel. I don&#8217;t know how I could use lazy arrays to replace something such as bacon.js just yet, but we can still use laziness for more practical problems. Suppose we were building a calendar, we could model every day <em>ever</em> as part of an infinite lazy sequence. Then we can run that through a lazy map to convert those raw <em>new Date()</em> instances into pretty strings. Here&#8217;s another test file I added to the repository to illustrate this.</p><pre class="crayon-plain-tag">'use strict';

var assert = require('assert');
var larr = require('..');

// Amount of milliseconds in a day.
var DAY = 86400000;

/**
 * Creates an infinite lazy array of all possible times using a given start
 * date and step timestamp. Providing a negative step will make it go
 * backwards.
 *
 * @param {Date} now
 * @param {Number} step
 */
function dates(now, step) {
    return larr.create(function () {
        var next = new Date(now.getTime() + step);
        return larr.cons(now, dates(next, step));
    });
}

describe('date', function () {
    var start = new Date('1994 Jan 27');
    var d;

    beforeEach(function () {
        d = dates(start, DAY);
    });

    it('should have the start date as the first value', function () {
        assert.strictEqual(larr.first(d).getTime(), start.getTime());
    });

    it('should allow me to skip forward some days', function () {
        var future = larr.nth(d, 3);
        assert.strictEqual(future.getTime(), new Date('1994 Jan 30').getTime());
    });

    it('should allow me to map a sequence of dates to strings', function () {
        function str(date) {
            return date.toDateString();
        }

        var days = larr.all(larr.map(str, larr.take(3, d)));
        var expected = [
            'Thu Jan 27 1994',
            'Fri Jan 28 1994',
            'Sat Jan 29 1994'
        ];

        assert.deepEqual(days, expected);
    });
});</pre><p>As you can see, a simple function can produce some interesting and powerful results. We could quite easily generate an infinite lazy array of every Thursday for the next decade. We could filter out any date that falls on the 25th and then reduce their timestamps down to a value. I don&#8217;t know why you&#8217;d want to do that, but it illustrates the point, lazy arrays allow you to do some really difficult things very easily. You just have to know when to apply them to your problem.</p>
<h3>A long way to go</h3>
<p>These are only the fundamentals really, I could carry on until I had ported the entire <a href="http://clojure.org/sequences#toc5">Clojure seq library</a>, which I would actually be quite happy to do. I think this could provide a powerful tool for problems that are well suited to lazy solutions, you&#8217;d just have to implement a few functions that you&#8217;re used to having to hand with other more feature rich implementations.</p>
<p>If this receives any interest I&#8217;d put some more time into it to flesh it out, but for now I think the basics are enough. It could also really do with some documentation, but comprehensive tests and abundant JSDoc comments will have to do for now. It wouldn&#8217;t be hard to generate API documentation from the comments and supply a bunch more examples in the readme. I&#8217;d love to hear what you think and what you could imagine using these techniques for.</p>
<p>Just imagine if this supported transducers and other such wonders too.</p>
]]></content:encoded>
			<wfw:commentRss>/2015/05/31/lazy-arrays-in-javascript/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
		</item>
		<item>
		<title>vim-expand, my second {plugin,bundle}!</title>
		<link>/2014/12/10/vim-expand-my-second-pluginbundle/</link>
		<comments>/2014/12/10/vim-expand-my-second-pluginbundle/#respond</comments>
		<pubDate>Wed, 10 Dec 2014 22:37:03 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[Projects]]></category>
		<category><![CDATA[Text Editors]]></category>
		<category><![CDATA[Vim]]></category>
		<category><![CDATA[plugin]]></category>
		<category><![CDATA[vim]]></category>
		<category><![CDATA[vim-expand]]></category>

		<guid isPermaLink="false">/?p=244</guid>
		<description><![CDATA[So I just pushed up my second ever Vim plugin, vim-expand. It allows you to expand things like {foo,bar}, {1..10} and $HOME inline with a single command. It&#8217;s not just limited to single lines though, you can also execute it on a visual range! Here&#8217;s a quick video of it in action. There&#8217;s way more <a class="read-more" href="/2014/12/10/vim-expand-my-second-pluginbundle/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>So I just pushed up my second ever Vim plugin, <a href="https://github.com/Wolfy87/vim-expand">vim-expand</a>. It allows you to expand things like {foo,bar}, {1..10} and $HOME inline with a single command. It&#8217;s not just limited to single lines though, you can also execute it on a visual range! Here&#8217;s a quick video of it in action.</p>
<p><script id="asciicast-14558" src="https://asciinema.org/a/14558.js" async="" type="text/javascript"></script></p>
<p>There&#8217;s way more information in the repository, so have a read through that. I hope it comes in useful for others some day, it&#8217;s been useful for me a few times already!</p>
]]></content:encoded>
			<wfw:commentRss>/2014/12/10/vim-expand-my-second-pluginbundle/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Building vim-netrw-signs: Into the VimL</title>
		<link>/2014/09/03/building-vim-netrw-signs-into-the-viml/</link>
		<comments>/2014/09/03/building-vim-netrw-signs-into-the-viml/#respond</comments>
		<pubDate>Wed, 03 Sep 2014 18:00:00 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[Projects]]></category>
		<category><![CDATA[git]]></category>
		<category><![CDATA[netrw]]></category>
		<category><![CDATA[vim]]></category>

		<guid isPermaLink="false">/?p=172</guid>
		<description><![CDATA[In this post I&#8217;m going to aim for an MVP that may not be the most usable but can serve as a proof of concept. This version will only run when you call a command and have minimal configuration. Polishing of the plugin will come after in the form of help pages, configuration and automatic <a class="read-more" href="/2014/09/03/building-vim-netrw-signs-into-the-viml/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>In this post I&#8217;m going to aim for an MVP that may not be the most usable but can serve as a proof of concept. This version will only run when you call a command and have minimal configuration. Polishing of the plugin will come after in the form of help pages, configuration and automatic execution.</p>
<p>The very first step involves creating the main plugin file which is loaded from the runtime path and defines commands, automatic as well as normal. These commands will point to a namespaced file which will be loaded on demand, this is all contained within the <code>autoload</code> directory.</p>
<h3>The initial files</h3>
<p>First <code>plugin/netrw_signs.vim</code>, which points to an autoload function.</p><pre class="crayon-plain-tag">command! NetrwSigns :call netrw_signs#SignBuffer()</pre><p>Then we can create the &#8220;Hello, World!&#8221; function on the other end of this command in <code>autoload/netrw_signs.vim</code>.</p><pre class="crayon-plain-tag">function! netrw_signs#SignBuffer()
  echo "Hello, World!"
endfunction</pre><p>After adding the project directory to my runtime path (<code>set rtp+=$HOME/.../vim-netrw-signs</code> in <code>~/.vimrc</code>) I can open Vim and execute <code>:NetrwSigns</code> to run my new function. This prints &#8220;Hello, World!&#8221; to the bottom of my screen. Obviously the plugin still lacks a fair bit of functionality.</p>
<p>I will also add a way to fetch the version number, as I did with vim-enmasse.</p><pre class="crayon-plain-tag">" plugin/netrw_signs.vim
command! NetrwSignsVersion :echo netrw_signs#GetVersion()

" autoload/netrw_signs.vim
function! netrw_signs#GetVersion()
  return "1.0.0"
endfunction</pre><p>Next, we must build an implementation behind the <code>SignBuffer</code> function, so that involves building the entire thing. No big deal. But first, let&#8217;s test this stupidly simple version function in <code>tests/version.vader</code>.</p><pre class="crayon-plain-tag">Before (set up regular expression):
  let versionRegExp = '\v\d+.\d+.\d+'

Execute (can print the version number with the command):
  redir =&amp;gt; messages
  NetrwSignsVersion
  redir END

  let result = get(split(messages, "\n"), -1, "")

  Assert result =~# versionRegExp

Execute (can get the version number with the function):
  Assert netrw_signs#GetVersion() =~# versionRegExp</pre><p>I also had to add my project folder to my runtime path to get this to work in <code>test.sh</code>.</p><pre class="crayon-plain-tag">vim -Nu &amp;lt;(cat &amp;lt;&amp;lt; EOF
filetype off
set rtp+=$vader
set rtp+=. &amp;lt;-- This thing.
filetype plugin indent on
EOF) +Vader tests/*.vader</pre><p></p>
<h3>High level testing</h3>
<p>I&#8217;m going to use my tests to define how the plugin will actually work. Some may say that I&#8217;m driving my development with tests. These will be high level but provide me with all the checks I need to make sure my basic configuration is actually producing the desired results and signs. One of the best things about writing the tests up front is that my configuration will be thought out in a way that makes sense from the users perspective, I&#8217;ll then work back from there.</p>
<p>Here&#8217;s my preliminary configuration I&#8217;ll be using in my root high level tests. Below it is my thought process in pseudo-English.</p><pre class="crayon-plain-tag">let g:netrw_signs_checks={
  \'contains-hyphen': 'ContainsHyphen',
  \'contains-upper-case': 'ContainsUpperCase'
\}
let g:netrw_signs_styles={
  \'error': 'text=&amp;gt;&amp;gt; texthl=ErrorMsg'
  \'warning': 'text=&amp;gt;&amp;gt; texthl=WarningMsg'
\}
let g:netrw_signs_bindings={
  \'contains-hyphen': 'error',
  \'contains-upper-case': 'warning'
\}</pre><p></p><pre class="crayon-plain-tag">Let the check contains-hyphen use the function ContainsHyphen.
Let the check contains-upper-case use the function ContainsUpperCase.

Let the error sign have these arguments passed to it's definition within Vim.
Let the warning sign have these arguments passed to it's definition within Vim.

Let the contains-hyphen check show the error sign if it returns true.
Let the contains-upper-case check show the warning sign if it returns true.</pre><p>As far as I can tell so far, this is all the logic I will need to configure the plugin. This should allow the user more than enough power, it will even allow you to hook into git, which is my end goal. The one thing I&#8217;m not so sure about right now is how I&#8217;ll execute the functions by name reliably. It should &#8220;just work&#8221;, but I may encounter some problems with that later on. I also need to work out the format for the check functions return values.</p>
<p>My current thinking is for each check function to either get called once with each line of the netrw buffer or, alternatively, to pass an array of all lines to the function. The function would then run a map over that array and return an array of booleans. The one line approach allows for simple functions and the heavy lifting on my end (probably involving maps), the other approach involves heavier check functions but the chance for optimisations if you had to call <code>git status</code> for every line, for example.</p>
<p>With those implementation details in mind, I&#8217;ll write my first tests against this configuration.</p>
<h3>Uh oh&#8230;</h3>
<p>It is at this point that I realised how much work will actually be involved to get a working and tested MVP that didn&#8217;t die when it encountered tiny changes in netrw configuration. I don&#8217;t have time for this sort of return on investment, so I&#8217;m shelving this little project to learn about Clojure and algorithms using this stack of books I&#8217;ve accumulated. I&#8217;m obviously going to push everything I&#8217;ve got so far alongside these few posts, and I may even come back to it one day. Until then, sorry vim-netrw-signs, you&#8217;re dead to me.</p>
]]></content:encoded>
			<wfw:commentRss>/2014/09/03/building-vim-netrw-signs-into-the-viml/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Building vim-netrw-signs: Tooling</title>
		<link>/2014/09/01/building-vim-netrw-signs-tooling/</link>
		<comments>/2014/09/01/building-vim-netrw-signs-tooling/#respond</comments>
		<pubDate>Mon, 01 Sep 2014 08:00:30 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[Projects]]></category>
		<category><![CDATA[git]]></category>
		<category><![CDATA[netrw]]></category>
		<category><![CDATA[vim]]></category>

		<guid isPermaLink="false">/?p=168</guid>
		<description><![CDATA[In my last post I focused on getting the repository and main files up and running, here I&#8217;ll briefly touch on the satellite tooling I&#8217;m going to hook into to make the development a bit easier. Oh, also, I&#8217;m writing this from a cruise ship somewhere around Gibraltar. Travis So I created my .travis.yml file <a class="read-more" href="/2014/09/01/building-vim-netrw-signs-tooling/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>In my last post I focused on <a title="Building vim-netrw-signs: Introduction" href="/2014/08/11/building-vim-netrw-signs-introduction/">getting the repository and main files up and running</a>, here I&#8217;ll briefly touch on the satellite tooling I&#8217;m going to hook into to make the development a bit easier. Oh, also, I&#8217;m writing this from a cruise ship somewhere around Gibraltar.</p>
<h3>Travis</h3>
<p>So I created my <code>.travis.yml</code> file last time which gives me all the configuration I need to activate continuous integration testing. Because I went onto the <a href="https://travis-ci.org/">Travis</a> website and activated the repository, every time I or any other push it will run the test suite.</p>
<p>So this will allow me to check my code on another environment, which is always fun and games when it comes to Vim, but also have pull requests pre-vetted for me. All PRs will be built and have their results displayed within the actual PR page. The Travis integration actually goes both ways.</p>
<h3>Waffle</h3>
<p>This is a tool from the guys behind <a href="https://www.rallydev.com/">Rally</a>, which is basically enterprise task management. <a href="https://waffle.io/">Waffle</a> is the free and open source oriented version which allows me to control my GitHub issues as to do lists on a sort of Kanban board. I&#8217;ve already used their automated PR generator that asks to add the &#8220;ready&#8221; task count to my readme. This will allow anyone viewing the GitHub repository to see what tasks are researched, locked down and ready to be worked on by anyone and everyone.</p>
<h3>Tools in summary</h3>
<p>So I have Travis executing tests on my remote GitHub repository using Vader and Waffle hooking into the GitHub issues system to provide task boards and organisation. Now I can plan out tasks, drag them around their various states and tag them then build them.</p>
<p>I&#8217;ll probably open long running tasks (this should be most feature branches) up as pull requests so that I get diff, comment and CI tooling all on one page. This gives other developers the chance to see my thought processes and comments as I go about building a feature. It should also show how many times I forget to push without running the test suite.</p>
<h3>Next up</h3>
<p>Diving into the VimL and actually building this beast. I&#8217;ll keep popping up for air and writing little bits about the development, but it&#8217;s going to be fairly high level on the whole with a lot of links to commits. This is because it would take about five years to complete if I talked about every line I wrote.</p>
<p>So the next post will be massive and code heavy but should show the actual construction of a Vim plugin, not just the tooling and extra services.</p>
]]></content:encoded>
			<wfw:commentRss>/2014/09/01/building-vim-netrw-signs-tooling/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Building vim-netrw-signs: Introduction</title>
		<link>/2014/08/11/building-vim-netrw-signs-introduction/</link>
		<comments>/2014/08/11/building-vim-netrw-signs-introduction/#respond</comments>
		<pubDate>Mon, 11 Aug 2014 21:30:27 +0000</pubDate>
		<dc:creator><![CDATA[Oliver Caldwell]]></dc:creator>
				<category><![CDATA[Projects]]></category>
		<category><![CDATA[git]]></category>
		<category><![CDATA[netrw]]></category>
		<category><![CDATA[vim]]></category>

		<guid isPermaLink="false">/?p=99</guid>
		<description><![CDATA[I thought of another Vim plugin idea a while back at Vim London, which happens to be my second of such ideas, the first being vim-enmasse. My plan is to build this plugin over the coming weeks (probably months, ideally not years) and take you along for the ride with these brief posts. From git <a class="read-more" href="/2014/08/11/building-vim-netrw-signs-introduction/">[&#8230;]</a>]]></description>
				<content:encoded><![CDATA[<p>I thought of another Vim plugin idea a while back at <a href="http://www.meetup.com/Vim-London/">Vim London</a>, which happens to be my second of such ideas, the first being <a href="https://github.com/Wolfy87/vim-enmasse">vim-enmasse</a>. My plan is to build this plugin over the coming weeks (probably months, ideally not years) and take you along for the ride with these brief posts. From <code>git init</code> to <code>git tag v1.0.0</code>. To begin with, here&#8217;s <a href="https://github.com/Wolfy87/vim-netrw-signs">the repository</a> and the <a href="232121235a31ee282d363ae331050f40f8dbdc38">initial commit</a>. As with all of my open source code now, it&#8217;s &#8220;licensed&#8221; under <a href="http://unlicense.org/">The Unlicence</a>.</p>
<p>This plugin is much like <a href="https://github.com/mhinz/vim-signify">vim-signify</a> or <a href="https://github.com/scrooloose/syntastic">syntastic</a> but for netrw, Vim&#8217;s built in file browser. This is inspired by the way that some super-massive IDEs will show parts of your folder structure that have been touched according to git. I want to create something that could hook into linters or version control systems to warn you about things when you drop into netrw from time to time. This becomes an easy thing to do and a frequent occurrence if you have something like <a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a> installed.</p>
<p>So this will be quite generic with, probably, only git integrated to begin with. It will simply allow small composable modules to decide which files or folders should have signs attached to them. First thing&#8217;s first (after creating the repository)&#8230;</p>
<h3>Setting up the tests</h3>
<p>Yes, tests first. I used <a href="https://github.com/junegunn/vader.vim">vader.vim</a> on vim-enmasse and I&#8217;ll be doing the same here, but this time from the very beginning. It can be integrated in such a way that you can run tests from your local command line and <a href="https://travis-ci.org/">Travis CI</a>, as I&#8217;ll be doing soon enough. I&#8217;ll start off by defining a script to initialise dependencies and run my test suite, which is stolen from <a href="https://github.com/Wolfy87/vim-enmasse/blob/835ec0bd794183514865943188990669511d546b/test/run">vim-enmasse&#8217;s</a> (mostly).</p><pre class="crayon-plain-tag">#!/usr/bin/env bash

vader=.vader

if [[ ! -d $vader ]]; then
	git clone https://github.com/junegunn/vader.vim.git $vader
else
	cd $vader
	git pull
	cd ..
fi

vim -Nu &lt;(cat &lt;&lt; EOF
filetype off
set rtp+=$vader
filetype plugin indent on
EOF) +Vader tests/*.vader</pre><p>And then I dropped in the Travis config, just because it&#8217;s that easy.</p><pre class="crayon-plain-tag">language: vim

before_script: |
  git clone https://github.com/junegunn/vader.vim.git

script: |
  vim -Nu &lt;(cat &lt;&lt; VIMRC
  filetype off
  set rtp+=vader.vim
  set rtp+=.
  set rtp+=after
  filetype plugin indent on
  VIMRC) -c 'Vader! tests/*.vader' &gt; /dev/null</pre><p>So I have two scripts, one Travis will use to execute quickly on some headless machine, and another I will repeatedly run locally (probably within a tmux split). The first script will check if I have vader cloned yet and will go and fetch it if not. When it executes it will run the tests in a minimal Vim environment and then report the results through the quickfix list of the minimal Vim window. I may change this to just dump it&#8217;s output like the Travis version, I haven&#8217;t decided yet.</p>
<p>So now all I have to do is add a <code>*.vader</code> file to <code>tests/</code> and either or my two execution methods should run them in identical environments. I have to be careful to not let my highly customised Vim configuration leak through to my testing environment.</p>
<h3>Next</h3>
<p>I&#8217;ll be adding my first hunk of source code, even if it&#8217;s a bit of autoload magic as well as a rudimentary test to check the Travis integration. Here&#8217;s <a href="https://github.com/Wolfy87/vim-netrw-signs/commit/14e769dd281bffb6c7a77c30e6d33d2c65b47423">tonight&#8217;s last commit</a>. Baby steps are the way forwards.</p>
]]></content:encoded>
			<wfw:commentRss>/2014/08/11/building-vim-netrw-signs-introduction/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
	</channel>
</rss>
